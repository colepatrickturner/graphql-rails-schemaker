 <%==model.name%>Type = GraphQL::ObjectType.define do
  name "<%==model.name%>"
  description "Type for <%==model.name%> object"

  interfaces [::GraphQL::Relay::Node.interface]

  <%
  attributes.sort_by { |k,v| [k == :id ? 0 : 1, k] }.each do |name, attribute|
    association = nil

    if attribute.key? :association
      association = attribute[:association]
    elsif model.respond_to? :reflect_on_all_associations

    end

    if model.respond_to? :primary_key and name.to_s == model.primary_key
      %>
  global_id_field :<%==name%>
      <%
    elsif association.present?
      if association.polymorphic?
        object_model = association.active_record
      else
        object_model = association.klass
      end

      if association.collection?
        list_or_connection = nil
        while list_or_connection.nil?
          STDOUT.puts "Should many type `\e[32m#{name}\e[0m` on \e[32m#{model.name}\e[0m be a list or connection? (\e[34ml = list \e[39m| \e[32mc = connection \e[39m| \e[93msh = help\e[39m)."
          command = STDIN.gets.chomp.downcase
          case command
          when "c", "g"
            list_or_connection = :connection
          when "l"
            list_or_connection = :list
          when "h"
            STDOUT.puts "Lists return all objects in the association. Use connections if pagination is necessary."
          end
        end

        if list_or_connection == :connection
          %>
  connection :<%==association.plural_name%>, <%==object_model.is_a?(model) or object_model == model ? "-> { " : ""%><%==object_model%>Type<%=association.polymorphic? ? "Union" : ""%>.connection_type<%==object_model.is_a?(model) or object_model == model ? " }" : ""%>, "Association to many `<%==association.plural_name%>` on <%==model.name%>"
          <%
        else
          %>
  field :<%==association.plural_name%>, <%==object_model.is_a?(model) or object_model == model ? "-> { " : ""%><%==object_model%>Type<%=association.polymorphic? ? "Union" : ""%>.to_list_type<%==object_model.is_a?(model) or object_model == model ? " }" : ""%>, "Association to many `<%==association.plural_name%>` on <%==model.name%>"
          <%
        end
      else
        %>
  field :<%==association.name%>, <%==object_model.is_a?(model) or object_model == model ? "-> { " : ""%><%==object_model%>Type<%=association.polymorphic? ? "Union" : ""%><%==object_model.is_a?(model) or object_model == model ? " }" : ""%>, "Association to one `<%==association.name%>` on <%==model.name%>"
        <%
      end
    else
      scalar_types = { :id => "types.ID", :boolean => "types.Boolean", :integer => "types.Int", :float => "types.Float", :decimal => "types.Float", :string => "types.String"}
      field_scalar_type =
        if attribute[:type].present? and scalar_types.key? attribute[:type].to_sym
          scalar_types[attribute[:type].to_sym]
        else
          scalar_types[:string]
        end
        %>
  field :<%==name%>, <%==field_scalar_type%>, "Property `<%==attribute[:property]%>` for <%==model.name%>"<%==attribute[:property].to_s != name.to_s ? ", property: :#{attribute[:property]}" : ""%>
        <%
    end
  end
  %>

end
